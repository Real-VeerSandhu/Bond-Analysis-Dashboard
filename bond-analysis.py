# %% [markdown]
# # Imports

# %%
import scipy.optimize as optimize
import numpy as np
import matplotlib.pyplot as plt

# %%
def zcb(fv, y, t):
    """
    Get Price of Zero Coupon Bond = Face Value / (1 + y[annual yield])^t[time to maturity]
    """

    return fv/( (1+y)**t)

print(zcb(100,0.02,2))

# %% [markdown]
# Means if we invest $96.11 for two years on continous 2%, we get 100 @ maturity 

# %%
# Constants for plotting
fv_const = 100  # Constant face value
y_const = 0.05  # Constant yield
t_const = 5     # Constant time to maturity

# Generate data for each plot
fv_values = np.linspace(50, 150, 100)    # Varying face value from 50 to 150
y_values = np.linspace(0.01, 0.10, 100)  # Varying yield from 1% to 10%
t_values = np.linspace(1, 30, 100)       # Varying time to maturity from 1 to 30 years

# Calculate ZCB prices for each variation
prices_fv = [zcb(fv, y_const, t_const) for fv in fv_values]
prices_y = [zcb(fv_const, y, t_const) for y in y_values]
prices_t = [zcb(fv_const, y_const, t) for t in t_values]


# %%
# Plotting
plt.figure(figsize=(18, 5))

# Plot 1: Price vs Face Value
plt.subplot(1, 3, 1)
plt.plot(fv_values, prices_fv, label='Yield=5%, Time=5 years')
plt.xlabel('Face Value')
plt.ylabel('Price')
plt.title('ZCB Price vs Face Value')
plt.legend()

# Plot 2: Price vs Yield
plt.subplot(1, 3, 2)
plt.plot(y_values, prices_y, label='Face Value=$100, Time=5 years')
plt.xlabel('Yield')
plt.ylabel('Price')
plt.title('ZCB Price vs Yield')
plt.legend()

# Plot 3: Price vs Time to Maturity
plt.subplot(1, 3, 3)
plt.plot(t_values, prices_t, label='Face Value=$100, Yield=5%')
plt.xlabel('Time to Maturity (years)')
plt.ylabel('Price')
plt.title('ZCB Price vs Time to Maturity')
plt.legend()

plt.tight_layout()
plt.show()

# %% [markdown]
# YTM: total return one can expect when all coupons and principal are received and bonds are held till maturity, basically internal rate of return if held till maturity

# %%
def b_ytm(price, fv, T, coup, freq=2, guess=0.05):
    freq = float(freq)
    periods = T*freq
    coupon = coup/100*fv/freq
    dt = [(i+1)/freq for i in range(int(periods))]
    ytm_func = lambda y: sum([coupon/(1+y/freq)**(freq*t) for t in dt]) + fv/(1+y/freq)**(freq*max(dt)) - price 
    return optimize.newton(ytm_func, guess)

print(b_ytm(95.0428,100,1.5,5.75,2))

# %% [markdown]
# ![image.png](attachment:image.png)

# %% [markdown]
# $95.04 is the Bond Price today, the Bond price is the present discounted value of the future cash stream generated by a bond. When we know YTM we can plug in and get the value of the bond.

# %%
def b_price(fv, T, ytm, coup, freq=2):
    freq = float(freq)
    periods = T*freq
    coupon = coup/100*fv/freq
    dt = [(i+1)/freq for i in range(int(periods))]
    price = sum([coupon/(1+ytm/freq)**(freq*t) for t in dt]) + fv/(1+ytm/freq)**(freq*T)
    return price

print(b_price(100,1.5,0.09369155345239477,5.75,2))

# %% [markdown]
# Bond Duration: Duration measures a bondâ€™s price sensitivity to change in interest rate. Modified duration measures the price change in a bond given a 1% change in interest rate. The modified duration of a bond can be thought of as the first derivative of the relationship between price and yield.

# %%
def mod_duration(price, par, T, coup, freq, dy=0.01):
    ytm = b_ytm(price, par, T, coup, freq)
    ytm_minus = ytm - dy
    price_minus = b_price(par, T, ytm_minus, coup, freq)
    ytm_plus = ytm + dy
    price_plus = b_price(par, T, ytm_plus, coup, freq)
    mduration = (price_minus-price_plus)/(2*price*dy)
    return mduration

print(mod_duration(95.04,100,1.5,5.75,2,0.01))

# %% [markdown]
# Bond Convexity: Convexity is the sensitivity measure of the duration of a bond to yield changes. Convexity is the second derivative of the relationship between price and yield.

# %% [markdown]
# ![image.png](attachment:image.png)

# %%
def b_convexity(price, par, T, coup, freq, dy=0.01):
    ytm = b_ytm(price, par, T, coup, freq)
    ytm_minus = ytm - dy
    price_minus = b_price(par, T, ytm_minus, coup, freq)
    ytm_plus = ytm + dy
    price_plus = b_price(par, T, ytm_plus, coup, freq)
    convexity = (price_minus+price_plus-2*price)/(price*dy**2)
    return convexity
print(b_convexity(95.0428, 100, 1.5, 5.75, 2))


